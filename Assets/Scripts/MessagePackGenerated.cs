// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(16)
            {
                { typeof(global::LoadedChunk[]), 0 },
                { typeof(global::SavedBuilding[]), 1 },
                { typeof(global::SavedItemStack[]), 2 },
                { typeof(global::SavedOre[]), 3 },
                { typeof(global::SavedProcessingBuilding[]), 4 },
                { typeof(global::SavedWorldItemStack[]), 5 },
                { typeof(global::Item.Type), 6 },
                { typeof(global::SavedBuilding.Type), 7 },
                { typeof(global::SavedProcessingBuilding.Type), 8 },
                { typeof(global::LoadedChunk), 9 },
                { typeof(global::SaveData), 10 },
                { typeof(global::SavedBuilding), 11 },
                { typeof(global::SavedItemStack), 12 },
                { typeof(global::SavedOre), 13 },
                { typeof(global::SavedProcessingBuilding), 14 },
                { typeof(global::SavedWorldItemStack), 15 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::LoadedChunk>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::SavedBuilding>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::SavedItemStack>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::SavedOre>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<global::SavedProcessingBuilding>();
                case 5: return new global::MessagePack.Formatters.ArrayFormatter<global::SavedWorldItemStack>();
                case 6: return new MessagePack.Formatters.Item_TypeFormatter();
                case 7: return new MessagePack.Formatters.SavedBuilding_TypeFormatter();
                case 8: return new MessagePack.Formatters.SavedProcessingBuilding_TypeFormatter();
                case 9: return new MessagePack.Formatters.LoadedChunkFormatter();
                case 10: return new MessagePack.Formatters.SaveDataFormatter();
                case 11: return new MessagePack.Formatters.SavedBuildingFormatter();
                case 12: return new MessagePack.Formatters.SavedItemStackFormatter();
                case 13: return new MessagePack.Formatters.SavedOreFormatter();
                case 14: return new MessagePack.Formatters.SavedProcessingBuildingFormatter();
                case 15: return new MessagePack.Formatters.SavedWorldItemStackFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class Item_TypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Item.Type>
    {
        public void Serialize(ref MessagePackWriter writer, global::Item.Type value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::Item.Type Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Item.Type)reader.ReadByte();
        }
    }

    public sealed class SavedBuilding_TypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedBuilding.Type>
    {
        public void Serialize(ref MessagePackWriter writer, global::SavedBuilding.Type value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::SavedBuilding.Type Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::SavedBuilding.Type)reader.ReadByte();
        }
    }

    public sealed class SavedProcessingBuilding_TypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedProcessingBuilding.Type>
    {
        public void Serialize(ref MessagePackWriter writer, global::SavedProcessingBuilding.Type value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::SavedProcessingBuilding.Type Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::SavedProcessingBuilding.Type)reader.ReadByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class LoadedChunkFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LoadedChunk>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public LoadedChunkFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "x", 0 },
                { "y", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("x"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("y"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::LoadedChunk value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.x);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.y);
        }

        public global::LoadedChunk Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __x__ = default(int);
            var __y__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __x__ = reader.ReadInt32();
                        break;
                    case 1:
                        __y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LoadedChunk(__x__, __y__);
            ____result.x = __x__;
            ____result.y = __y__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SaveData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SaveDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "buildings", 0 },
                { "processingBuildings", 1 },
                { "items", 2 },
                { "chunks", 3 },
                { "ores", 4 },
                { "seed", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("buildings"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("processingBuildings"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("items"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("chunks"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ores"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("seed"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SavedBuilding[]>().Serialize(ref writer, value.buildings, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SavedProcessingBuilding[]>().Serialize(ref writer, value.processingBuildings, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::SavedWorldItemStack[]>().Serialize(ref writer, value.items, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::LoadedChunk[]>().Serialize(ref writer, value.chunks, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SavedOre[]>().Serialize(ref writer, value.ores, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.seed);
        }

        public global::SaveData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __buildings__ = default(global::SavedBuilding[]);
            var __processingBuildings__ = default(global::SavedProcessingBuilding[]);
            var __items__ = default(global::SavedWorldItemStack[]);
            var __chunks__ = default(global::LoadedChunk[]);
            var __ores__ = default(global::SavedOre[]);
            var __seed__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __buildings__ = formatterResolver.GetFormatterWithVerify<global::SavedBuilding[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __processingBuildings__ = formatterResolver.GetFormatterWithVerify<global::SavedProcessingBuilding[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __items__ = formatterResolver.GetFormatterWithVerify<global::SavedWorldItemStack[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __chunks__ = formatterResolver.GetFormatterWithVerify<global::LoadedChunk[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ores__ = formatterResolver.GetFormatterWithVerify<global::SavedOre[]>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __seed__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SaveData(__buildings__, __processingBuildings__, __items__, __chunks__, __ores__, __seed__);
            ____result.buildings = __buildings__;
            ____result.processingBuildings = __processingBuildings__;
            ____result.items = __items__;
            ____result.chunks = __chunks__;
            ____result.ores = __ores__;
            ____result.seed = __seed__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SavedBuildingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedBuilding>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SavedBuildingFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "type", 0 },
                { "rotation", 1 },
                { "xPos", 2 },
                { "yPos", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("rotation"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("xPos"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("yPos"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SavedBuilding value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SavedBuilding.Type>().Serialize(ref writer, value.type, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.rotation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.xPos);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.yPos);
        }

        public global::SavedBuilding Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __type__ = default(global::SavedBuilding.Type);
            var __rotation__ = default(byte);
            var __xPos__ = default(int);
            var __yPos__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::SavedBuilding.Type>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __rotation__ = reader.ReadByte();
                        break;
                    case 2:
                        __xPos__ = reader.ReadInt32();
                        break;
                    case 3:
                        __yPos__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SavedBuilding(__type__, __rotation__, __xPos__, __yPos__);
            ____result.type = __type__;
            ____result.rotation = __rotation__;
            ____result.xPos = __xPos__;
            ____result.yPos = __yPos__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SavedItemStackFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedItemStack>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SavedItemStackFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "amount", 0 },
                { "type", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("amount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SavedItemStack value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.amount);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Item.Type>().Serialize(ref writer, value.type, options);
        }

        public global::SavedItemStack Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __amount__ = default(byte);
            var __type__ = default(global::Item.Type);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __amount__ = reader.ReadByte();
                        break;
                    case 1:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::Item.Type>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SavedItemStack(__amount__, __type__);
            ____result.amount = __amount__;
            ____result.type = __type__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SavedOreFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedOre>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SavedOreFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "x", 0 },
                { "y", 1 },
                { "capacity", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("x"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("y"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("capacity"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SavedOre value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.x);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.y);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.capacity);
        }

        public global::SavedOre Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __x__ = default(int);
            var __y__ = default(int);
            var __capacity__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __x__ = reader.ReadInt32();
                        break;
                    case 1:
                        __y__ = reader.ReadInt32();
                        break;
                    case 2:
                        __capacity__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SavedOre(__x__, __y__, __capacity__);
            ____result.x = __x__;
            ____result.y = __y__;
            ____result.capacity = __capacity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SavedProcessingBuildingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedProcessingBuilding>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SavedProcessingBuildingFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "type", 0 },
                { "rotation", 1 },
                { "xPos", 2 },
                { "yPos", 3 },
                { "inputs", 4 },
                { "output", 5 },
                { "currentRecipe", 6 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("rotation"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("xPos"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("yPos"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("inputs"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("output"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("currentRecipe"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SavedProcessingBuilding value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::SavedProcessingBuilding.Type>().Serialize(ref writer, value.type, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.rotation);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.xPos);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.yPos);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::SavedItemStack[]>().Serialize(ref writer, value.inputs, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::SavedItemStack>().Serialize(ref writer, value.output, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.currentRecipe);
        }

        public global::SavedProcessingBuilding Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __type__ = default(global::SavedProcessingBuilding.Type);
            var __rotation__ = default(byte);
            var __xPos__ = default(int);
            var __yPos__ = default(int);
            var __inputs__ = default(global::SavedItemStack[]);
            var __output__ = default(global::SavedItemStack);
            var __currentRecipe__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::SavedProcessingBuilding.Type>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __rotation__ = reader.ReadByte();
                        break;
                    case 2:
                        __xPos__ = reader.ReadInt32();
                        break;
                    case 3:
                        __yPos__ = reader.ReadInt32();
                        break;
                    case 4:
                        __inputs__ = formatterResolver.GetFormatterWithVerify<global::SavedItemStack[]>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __output__ = formatterResolver.GetFormatterWithVerify<global::SavedItemStack>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __currentRecipe__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SavedProcessingBuilding(__type__, __rotation__, __xPos__, __yPos__, __inputs__, __output__, __currentRecipe__);
            ____result.type = __type__;
            ____result.rotation = __rotation__;
            ____result.xPos = __xPos__;
            ____result.yPos = __yPos__;
            ____result.inputs = __inputs__;
            ____result.output = __output__;
            ____result.currentRecipe = __currentRecipe__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SavedWorldItemStackFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SavedWorldItemStack>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SavedWorldItemStackFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "amount", 0 },
                { "type", 1 },
                { "xPos", 2 },
                { "yPos", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("amount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("xPos"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("yPos"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SavedWorldItemStack value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.amount);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Item.Type>().Serialize(ref writer, value.type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.xPos);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.yPos);
        }

        public global::SavedWorldItemStack Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __amount__ = default(byte);
            var __type__ = default(global::Item.Type);
            var __xPos__ = default(int);
            var __yPos__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __amount__ = reader.ReadByte();
                        break;
                    case 1:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::Item.Type>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __xPos__ = reader.ReadInt32();
                        break;
                    case 3:
                        __yPos__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SavedWorldItemStack(__amount__, __type__, __xPos__, __yPos__);
            ____result.amount = __amount__;
            ____result.type = __type__;
            ____result.xPos = __xPos__;
            ____result.yPos = __yPos__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

